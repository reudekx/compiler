C++과 Rust를 주로 참고하고 있으므로 해당 언어들의 특성을 여기에 정리한다.
어느 정도 검증은 하겠지만 AI의 도움을 많이 받았기 떄문에 필요시 추가적인 검색을 통해 엄밀히 따져봐야 할 수 있음.



C++의 생성자, 소멸자

    1. 생성자
        MyClass a;
        MyClass a(10);
        
    2. 복사 생성자
        MyClass a;
        MyClass b(a);

    3. 소멸자
        스택 객체의 경우 스코프 종료시 호출,
        힙 객체는 delete시 호출


    위 3가지 함수는 반환 타입이 없다.
    

    4. 복사 대입 생성자
        MyClass a = b;

        반환 타입이 MyClass&이다.
        연쇄 할당이 가능하기 위해서는 좌측 변수가 레퍼런스를 반환해야 하기 때문

        MyClass a = b = c;
            이때 b가 복사 대입 생성자를 호출하고 스스로에 대한 레퍼런스를 반환한다.
            그럼 이걸 a가 복사 대입 생성자 호출시 인자로 이용한다.

    5. 이동 생성자
        

    6. 이동 대입 생성자

C++의 lvalue, prvalue, xvalue, glvalue, rvalue

    검색을 하다보니 위 용어가 자주 등장하던데..
        실제로 각각에 대한 엄밀한 정의를 알고 구분짓는 게 중요한지,
        아니면 코드 작성 과정에서 자연히 도출되는 부가적인 정보일 뿐인지 정리를 하면서 알아보자

    참고 링크
        https://learn.microsoft.com/ko-kr/cpp/cpp/lvalues-and-rvalues-visual-cpp?view=msvc-170

    (찾아보면서 느낀 건데.. C++의 여러 특성을 위 용어들을 기반으로 설명하는 글이 많이 보이기 때문에
        정확한 정의를 아는 것이 필요할 듯 하다.)

        또한 결국 컴파일러 구현 시 명확한 구분을 해야 컴파일 오류를 발생시킬 수 있음.

    
    identity, move의 여부에 따라 구분이 된다.

    1. lvalue
        identity를 가지고, move될 수 없다.

    2. xvalue
        identity를 가지고, move될 수 있다.

    3. prvalue
        identity를 가지지 않고, move될 수 있다.  -> 잘못됨. C++ 17이후부터는 복사 생략때문에 move조차 일어나지 않는다고 함.. (검증 필요)

    모든 value는 이상의 3가지 중 하나에 속하게 된다.

    더 큰 분류를 살펴 보면,

    1. rvalue
        move될 수 있다.

    2. glvalue
        identity를 가진다.

    xvalue를 정확히 알기 위해서,
    rvalue reference와 std::move에 대해 이해할 필요가 있다.

        std::move의 역할은?

        가령, std::move(Object());
        이 코드는 argument 객체를 Object&& (ravlue reference)로 캐스팅한다.

        이제 다음의 대입문을 확인해보자.
        Object object = std::move(Object());

        std::move를 통해, 복사 대입 연산자와 이동 대입 연산자 중, 후자가 선택되게 된다.

        결국 std::move의 역할은 = 연산자의 구현 중 rvalue reference 타입의 파라미터를 가지는
        오버로드가 선택될 수 있도록 하는 것이다.

        또한 move될 수 없는 lvalue를 xvalue로 캐스팅 해주는 역할이라고 봐도 될.. 것 같다.

    나름대로 결론을 내려보자면..
        복사와 이동을 구분하여 개발을 할 수 있도록,
        rvalue reference 타입을 도입했고,
        C++의 함수 오버로딩 기능을 이용하여 = 연산자만으로 이동과 복사를 모두 처리할 수 있게 되었다.
        물론 형변환이 이뤄져야 하니까.. std::move가 그 역할을 해준다.

        Object object = static_cast<Object&&>(Object());
        // Object object = (Object&&)Object();

        Object object = std::move(Object());

        위 둘은 동일한 기능을 수행하는 듯하다. (검증 필요)

    그렇다면 Obejct&&와 같은 rvalue reference가 type으로서 명시되는 경우는?
        1. 함수 파라미터
        2. 캐스팅 (lvalue를 xvalue로 형변환)

        가령 Object&& object = Object(); 같은 코드를 작성해도 의미가 없다.
        왜냐하면 결국 object는 이후의 코드에서 lvalue로서 작동할 것이기 때문이다. (즉 object는 type이 rvalue reference인 lvalue..)

    const Object& object = Object();

        lvalue reference에 const 키워드를 붙임으로써 prvalue를 바인딩할 수 있다.
        이유는? -> 일관성 있는 코드 작성을 위해 prvalue를 읽기 전용으로만 참조할 수 있도록 한 듯

        생각해보니 복사 생성자의 파라미터 타입도 const Object& 이다.

        

C++의 copy elision

    복사 생략이 언제 이뤄지는지 알아보자.

    1. prvalue semantics (보장된 복사 생략)

        NRVO는 어떨까?

        가령

        Object get_object(bool k) { 
            Object obj1;
            Object obj2;

            if (k) return obj1;
        
            return obj2;
        }

        Object o = get_object(true);

        위의 경우를 자세히 따져보자.

            일단 get_object 함수 내부를 보자.
            이 함수가 컴파일 되면, return 값이 스택 공간이든 레지스터든 어딘가에 저장되는 형태로 반환될 것이다.
            이때 NRVO가 이뤄지면, 애초에 이 스택 공간 혹은 레지스터가 지역 변수로 이용될 것이고, 
            결국 지역 변수 -> 반환값 변수로의 복사/이동이 이뤄지지 않을 것이다.

            다만 위 경우에는 분기문으로 여러 변수 중 하나를 반환하도록 되어 있으므로, 
            컴파일 시점에 함수 내부에서 어떤 게 반환될지 결정할 수 없다.

            따라서 런타임에 조건에 따라 반환값 스택 공간 혹은 레지스터로의 복사/이동이 이뤄질 것이고, NRVO는 이뤄지지 않게 된다.

            그러나, 그렇다고 외부에서 함수 호출 시 copy elision이 이뤄지지 않는 게 아니다.
            get_object(true)는 prvalue이므로, copy elision이 이뤄진다.

            즉, 애초에 NRVO의 여부는 외부에서의 copy elision과는 별개이다.
            c++17 이후에서는 copy elision이 보장되므로 o의 주소가 get_object 함수의 hidden parameter로 전달되고,
            반환값 스택 공간 혹은 레지스터가 o의 주소로 이용될 것이다.

            다만 함수 내부의 지역 변수 또한 o의 주소(즉 반환값 공간)를 이용할지 말지는 NRVO가 수행됨에 달려있다는 것이다.
    
        결론적으로, 함수가 포인터 형태로 1급 객체로서 다뤄질 수 있으므로
            함수의 spec에 따른 컴파일이 일관되어야 하고, 특히 호출 시 prvalue를 생성하는 모든 함수는 RVO/NRVO와 같은 최적화와는 별개로
            copy elision을 위한 hidden parameter가 컴파일 시 생성되어야 한다.

    2. 기타 (보장되지 않는 경우)

        이건 나중에 찾아보자.

    
    

C++의 가상 함수, 가상 상속

    1. 가상 함수
        virtual 함수를 통해 객체가 vtable에 대한 포인터를 지니도록 하고,
        이를 통해 다형성을 구현할 수 있다.
    
    2. 가상 상속
        virtual 상속을 하게 되면, virtual 상속의 대상이 되는 부모의 필드를 가리키는
        포인터를 추가로 유지하게 된다.

        그래서 다이아몬드 상속이 이뤄졌을 때, Top -> Left, Right -> Bottom의 구조일 때,
        Bottom의 메모리 레이아웃에서 Left와 Right는 Top에 대한 필드를 가지지 않고
        Bottom이 지닌 Top의 필드의 위치를 참조하는 포인터를 지닌다.

        그러면.. 예를 들어 Left left = Bottom(); 과 같은 코드에서,
        Bottom에 있는 Top 필드는 Left로의 형변환 시 누락되지만,
        left에는 잘려나간 Top 필드를 가리키는 포인터가 있기 때문에 여전히 Top의 필드에 접근할 수 있게 된다.

    (뇌피셜로 쓴 게 많아서 추후 검증 필요)


C++ 완벽한 전달 (perfect fowarding)

Rust의 trait

    1. 정적 디스패치
        제네릭과 impl trait(단일 trait 바운드 제네릭으로 간주할 수 있다)

    2. 동적 디스패치
        dyn Trait

        -> vTable을 이용하여 동적 디스패치를 수행함.

        dyn Trait로 사용될 수 있는 Trait는 object-safe해야 함.

        예를 들어, Self를 반환하는 함수가 있는 Trait는 dyn 객체로 사용할 수 없음. 함수 spec이 구현마다 달라지기 때문.

Rust의 연관 타입

    연관 타입을 사용하는 이유
        -> 연관 타입을 이용한 Trait는 (Generics를 사용하지 않았다는 가정 하에) 하나의 타입에 대해 하나의 구현만 존재함.

    예를 들어서,

        trait Iterator {
            type Item;
            fn next(&mut self) -> Option<Self::Item>;
        }

        위를 Vec<i32>와 같은 타입에 대해 구현하게 되면, Iterator가 Generic 타입이 아니므로 Vec<i32>에 대해 
            하나의 구현만이 존재하게 되고 이때 Item을 i32로 지정해주면 된다.

        물론, 예를 들어 i32를 문자열 형태로 반환하는 반복자를 구현하고 싶을 수도 있음.. 이때는 Generic 타입으로 Iterator를 정의