[] -> 0 ~ 1개
{} -> 0개 이상


file ->
	[ import-stmt ] global-decls

import-stmt ->
	"import" "{" { module } "}"
	
global-decls ->
	{ global-decl }
	
global-decl ->
	"const" global-const-decl
	"static" global-static-decl
	"struct" named-struct-def
	"fun" named-fun-def
	
global-const-decl ->
	id type '=' constexpr
	
global-static-decl ->
	id type '=' constexpr // 순환 참조를 막기 위해 일단 초기 버전은 이렇게 구현
	
named-struct-def ->
	id struct-def-body
	
struct-def-body ->
	"{" { id type } "}"
	
type ->
	"struct" struct-def-body
	"fun" fun-type
	array-type
	named-type
	
fun-type ->
	"(" [ type { "," type } ] ")"  반환타입
	
array-type ->
	"[" type ";" number "]"
	
named-fun-def ->
	id fun-head scope
	
fun-head ->
	"(" { id type [ "," id type ] } ")"
	
scope ->
	"{" { statement } "}"
	
statement ->
	"const" local-const-decl
	"var" local-var-decl
	"if" scope [ { "elif" scope } "else" scope ]
	"while" scope
	scope
	expr-stmt
	assignment

local-const-decl ->
	id type [ '=' expression ]

local-var-decl ->
	id type [ '=' expression ]

assignment ->
	expr '=' expr
	
expr-stmt ->
	expr

expr ->
	atomic-expr { binary atomic-expr }
	
atomic-expr ->
	{ unary } primary-expr { call | index | member }
	
unary ->
	단항연산자
	
binary ->
	이항연산자

primary-expr ->
	id
	literal
	"(" expr ")"
	
call ->
	"(" [ expr { "," expr } ] ")"
	
index ->
	"[" expr "]"

member ->
	"." expr