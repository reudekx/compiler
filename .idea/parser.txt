파서를 어떻게 구현할지 생각.

각 파싱 함수는 AST의 노드를 반환한다.
    -> AST에서 사용될 노드 구조체(클래스)를 정의해야 한다.

단순한 AST를 생성하고 그 이후 의미 분석 및 최적화를 진행하는 게 좋을 것 같다.

즉, AST -> 의미 분석 -> 최적화

Parser
    -> 단순히 구문 분석만을 수행하여 AST를 생성한다.
    다만, 같은 scope 내 같은 변수명 재선언 금지 등을 위해서는 전후 맥락을 어느정도 파악할 필요가 있는데..
        -> 일단 이것도 나중에 처리하는 것으로 하자.

AST의 노드 종류에 대해 생각해보자.
    ->
    변수(선언, 할당, 초기화, 값으로서의 사용)
        ->
        선언과 초기화는 하나로 처리 (expression을 null로 설정하면 됨.)

        할당은.. expression = expression의 경우도 있으므로 따로 처리
    조건문(여러 if, elif, else를 벡터로 보관)
    반복문
    함수 정의(전역 함수 정의, 익명 함수 정의)
    호출

    정리)
        Variable { name }
        VarDecl { name, expression }
        Expression
        FuncDef
        Call